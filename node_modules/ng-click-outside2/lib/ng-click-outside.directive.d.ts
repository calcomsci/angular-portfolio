import { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Directove to detect clicks outside of the current element
 *
 * ```typescript
 * @Component({
 *   selector: 'app',
 *   template: `
 *     <div (clickOutside)="onClickedOutside($event)">Click outside this</div>
 *   `
 * })
 * export class AppComponent {
 *   onClickedOutside(e: Event) {
 *     console.log('Clicked outside:', e);
 *   }
 * }
 * ```
 */
export declare class NgClickOutsideDirective implements OnInit, OnChanges, OnDestroy {
    private _el;
    private _ngZone;
    private document;
    /**
     * Enables directive.
     */
    clickOutsideEnabled: boolean;
    /**
     * By default, the outside click event handler is automatically attached.
     *
     * Explicitely setting this to `true`sets the handler after the element is clicked. The outside click event handler
     * will then be removed after a click outside has occurred.
     */
    attachOutsideOnClick: boolean;
    /**
     * Delays the initialization of the click outside handler.
     * This may help for items that are conditionally shown ([see issue #13](https://github.com/arkon/ng-click-outside/issues/13)).
     */
    delayClickOutsideInit: boolean;
    /**
     *  If enabled, emits an event when user clicks outside of applications' window while it's visible.
     *  Especially useful if page contains iframes.
     */
    emitOnBlur: boolean;
    /**
     * A comma-separated string of DOM element queries to exclude when clicking outside of the element.
     * For example: `[exclude]="'button,.btn-primary'"`.
     */
    exclude: string;
    /**
     * By default, `clickOutside` registers excluded DOM elements on init.
     *
     * This property refreshes the list before the `clickOutside` event is triggered. This is useful for ensuring that
     * excluded elements added to the DOM after init are excluded (e.g. ng2-bootstrap popover: this allows for clicking
     * inside the `.popover-content` area if specified in `exclude`).
     */
    excludeBeforeClick: boolean;
    /**
     * A comma-separated list of events to cause the trigger.
     * ### For example, for additional mobile support:
     * `[clickOutsideEvents]="'click,touchstart'"`
     */
    clickOutsideEvents: string;
    /**
     * Outside Click Event
     */
    clickOutside: EventEmitter<Event>;
    private _nodesExcluded;
    private _events;
    constructor(_el: ElementRef, _ngZone: NgZone, document: Document);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private _init;
    private _initOnClickBody;
    private _excludeCheck;
    private _onClickBody;
    /**
     * Resolves problem with outside click on iframe
     * @see https://github.com/arkon/ng-click-outside/issues/32
     */
    private _onWindowBlur;
    private _emit;
    private _shouldExclude;
    private _initClickOutsideListener;
    private _removeClickOutsideListener;
    private _initAttachOutsideOnClickListener;
    private _removeAttachOutsideOnClickListener;
    private _initWindowBlurListener;
    private _removeWindowBlurListener;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgClickOutsideDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgClickOutsideDirective, "[clickOutside]", never, { "clickOutsideEnabled": "clickOutsideEnabled"; "attachOutsideOnClick": "attachOutsideOnClick"; "delayClickOutsideInit": "delayClickOutsideInit"; "emitOnBlur": "emitOnBlur"; "exclude": "exclude"; "excludeBeforeClick": "excludeBeforeClick"; "clickOutsideEvents": "clickOutsideEvents"; }, { "clickOutside": "clickOutside"; }, never, never, true>;
}
