import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./window.service";
export class ScrollSpyService {
    constructor(windowService) {
        this.windowService = windowService;
        this.stopSpying$ = new Subject();
        this.activeSpyTarget$ = new Subject();
        this.spyTargets = [];
        this.thresholdTop = 0;
        this.thresholdBottom = 0;
        this.isSpying = false;
        this.scrollEvent = this.windowService.scrollEvent.pipe(takeUntil(this.stopSpying$));
        this.resizeEvent = this.windowService.resizeEvent.pipe(takeUntil(this.stopSpying$));
    }
    spy({ scrollContainer, thresholdTop = 0, thresholdBottom = 0 } = {}) {
        // this is to prevent duplicate listeners
        if (this.isSpying) {
            return;
        }
        this.isSpying = true;
        this.scrollContainer = scrollContainer;
        this.thresholdTop = thresholdTop;
        this.thresholdBottom = thresholdBottom;
        this.scrollEvent.subscribe(() => this.checkActiveElement(scrollContainer));
        this.resizeEvent.subscribe(() => this.checkActiveElement(scrollContainer));
        if (scrollContainer != null) {
            this.windowService.getScrollEventForContainer(scrollContainer)
                .pipe(takeUntil(this.stopSpying$))
                .subscribe(() => this.checkActiveElement(scrollContainer));
        }
        this.checkActiveElement(scrollContainer);
    }
    addTarget(target) {
        this.spyTargets.push({ ...target });
        this.checkActiveElement(this.scrollContainer);
    }
    removeTarget(target) {
        this.spyTargets = this.spyTargets.filter(spyTarget => target !== spyTarget.name);
        this.checkActiveElement(this.scrollContainer);
    }
    checkActiveElement(scrollContainer) {
        let activeTarget = null;
        for (const target of this.spyTargets) {
            const activeElement = activeTarget != null ? activeTarget.element : null;
            if (this.isElementActive(target.element, scrollContainer, activeElement)) {
                activeTarget = target;
            }
        }
        this.activeSpyTarget$.next(activeTarget ? activeTarget.name : null);
    }
    isElementActive(element, scrollContainer, currentActiveElement) {
        const targetOffsetTop = this.windowService.getElementOffsetTop(element);
        const targetHeight = this.windowService.getElementHeight(element);
        if (currentActiveElement != null && this.windowService.getElementOffsetTop(currentActiveElement) > targetOffsetTop) {
            return false;
        }
        const hasContainer = (scrollContainer != null);
        const isInsideWindow = this.isElementInsideWindow(hasContainer, targetHeight, targetOffsetTop);
        if (isInsideWindow && !hasContainer) {
            return true;
        }
        return isInsideWindow && hasContainer && this.isElementInsiedScrollContainer(scrollContainer, targetHeight, targetOffsetTop);
    }
    isElementInsideWindow(hasContainer, elementHeight, elementOffsetTop) {
        const scrollTop = this.windowService.scrollTop;
        const viewportHeight = this.windowService.viewportHeight;
        // target bottom edge is below window top edge && target top edge is above window bottom edge
        // if target has a container, don't check for thresholds on the window
        if (hasContainer) {
            return elementOffsetTop + elementHeight > scrollTop
                && elementOffsetTop < scrollTop + viewportHeight;
        }
        return elementOffsetTop + elementHeight > scrollTop + this.thresholdTop
            && elementOffsetTop < scrollTop + viewportHeight - this.thresholdBottom;
    }
    isElementInsiedScrollContainer(container, elementHeight, elementOffsetTop) {
        const scrollContainerScrollTop = this.windowService.getElementScrollTop(container);
        const scrollContainerHeight = this.windowService.getElementHeight(container);
        const elementOffsetTopFromParent = elementOffsetTop - this.windowService.getElementOffsetTop(container);
        // element bottom edge is below container top edge && element top edge is above container bottom edge
        return elementOffsetTopFromParent + elementHeight > scrollContainerScrollTop + this.thresholdTop
            && elementOffsetTopFromParent < scrollContainerScrollTop + scrollContainerHeight - this.thresholdBottom;
    }
    get activeSpyTarget() {
        return this.activeSpyTarget$.asObservable();
    }
    stopSpying() {
        this.stopSpying$.next();
        this.spyTargets = [];
        this.isSpying = false;
    }
}
ScrollSpyService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ScrollSpyService, deps: [{ token: i1.WindowService }], target: i0.ɵɵFactoryTarget.Injectable });
ScrollSpyService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ScrollSpyService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ScrollSpyService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.WindowService }]; } });
//# sourceMappingURL=data:application/json;base64,