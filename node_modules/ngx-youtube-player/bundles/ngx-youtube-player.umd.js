(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ngx-youtube-player', ['exports', '@angular/core', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ngx-youtube-player"] = {}, global.ng.core, global.rxjs));
})(this, (function (exports, i0, rxjs) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    function win() {
        return window;
    }
    function YouTubeRef() {
        return win()["YT"];
    }
    function YouTubePlayerRef() {
        return YouTubeRef().Player;
    }
    var defaultSizes = {
        height: 270,
        width: 367,
    };
    var YoutubePlayerService = /** @class */ (function () {
        function YoutubePlayerService(zone) {
            this.zone = zone;
            this.api = new rxjs.ReplaySubject(1);
            this.createApi();
        }
        YoutubePlayerService.prototype.loadPlayerApi = function (options) {
            var doc = win().document;
            if (!YoutubePlayerService["ytApiLoaded"]) {
                YoutubePlayerService.ytApiLoaded = true;
                var playerApiScript = doc.createElement("script");
                playerApiScript.type = "text/javascript";
                playerApiScript.src = options.protocol + "://www.youtube.com/iframe_api";
                doc.body.appendChild(playerApiScript);
            }
        };
        YoutubePlayerService.prototype.setupPlayer = function (elementId, outputs, sizes, videoId, playerVars) {
            var _this = this;
            if (videoId === void 0) { videoId = ""; }
            var createPlayer = function () {
                if (YouTubePlayerRef) {
                    _this.createPlayer(elementId, outputs, sizes, videoId, playerVars);
                }
            };
            this.api.subscribe(createPlayer);
        };
        YoutubePlayerService.prototype.play = function (player) {
            player.playVideo();
        };
        YoutubePlayerService.prototype.pause = function (player) {
            player.pauseVideo();
        };
        YoutubePlayerService.prototype.playVideo = function (media, player) {
            var id = media.id.videoId ? media.id.videoId : media.id;
            player.loadVideoById(id);
            this.play(player);
        };
        YoutubePlayerService.prototype.isPlaying = function (player) {
            // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING
            var isPlayerReady = player && player.getPlayerState;
            var playerState = isPlayerReady ? player.getPlayerState() : {};
            var isPlayerPlaying = isPlayerReady
                ? playerState !== YouTubeRef().PlayerState.ENDED &&
                    playerState !== YouTubeRef().PlayerState.PAUSED
                : false;
            return isPlayerPlaying;
        };
        YoutubePlayerService.prototype.createPlayer = function (elementId, outputs, sizes, videoId, playerVars) {
            var _this = this;
            if (videoId === void 0) { videoId = ""; }
            if (playerVars === void 0) { playerVars = {}; }
            var playerSize = {
                height: sizes.height || defaultSizes.height,
                width: sizes.width || defaultSizes.width,
            };
            var ytPlayer = YouTubePlayerRef();
            return new ytPlayer(elementId, Object.assign(Object.assign({}, playerSize), { events: {
                    onReady: function (ev) {
                        _this.zone.run(function () { return outputs.ready && outputs.ready.next(ev.target); });
                    },
                    onStateChange: function (ev) {
                        _this.zone.run(function () { return outputs.change && outputs.change.next(ev); });
                    },
                }, playerVars: playerVars, videoId: videoId }));
        };
        YoutubePlayerService.prototype.toggleFullScreen = function (player, isFullScreen) {
            var height = defaultSizes.height, width = defaultSizes.width;
            if (!isFullScreen) {
                height = window.innerHeight;
                width = window.innerWidth;
            }
            player.setSize(width, height);
        };
        // adpoted from uid
        YoutubePlayerService.prototype.generateUniqueId = function () {
            var len = 7;
            return Math.random().toString(35).substr(2, len);
        };
        YoutubePlayerService.prototype.createApi = function () {
            var _this = this;
            var onYouTubeIframeAPIReady = function () {
                if (win()) {
                    win()["onYouTubeIframeAPIReadyCalled"] = true;
                    _this.api.next();
                }
            };
            win()["onYouTubeIframeAPIReady"] = onYouTubeIframeAPIReady;
            /**
             * If onYouTubeIframeAPIReady is called in other place, then just trigger next
             * This is to prevent player not initializing issue when another player got initialized in other place
             */
            if (win()["onYouTubeIframeAPIReadyCalled"]) {
                this.api.next();
            }
        };
        return YoutubePlayerService;
    }());
    YoutubePlayerService.ytApiLoaded = false;
    YoutubePlayerService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function YoutubePlayerService_Factory() { return new YoutubePlayerService(i0__namespace.ɵɵinject(i0__namespace.NgZone)); }, token: YoutubePlayerService, providedIn: "root" });
    YoutubePlayerService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: "root",
                },] }
    ];
    YoutubePlayerService.ctorParameters = function () { return [
        { type: i0.NgZone }
    ]; };

    var YoutubePlayerComponent = /** @class */ (function () {
        function YoutubePlayerComponent(playerService, elementRef, renderer) {
            this.playerService = playerService;
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.videoId = '';
            this.height = defaultSizes.height;
            this.width = defaultSizes.width;
            /**
             * @description sets the protocol by the navigator object
             * if there is no window, it sets a default http protocol
             * unless the protocol is set from outside
             */
            this.protocol = this.getProtocol();
            this.playerVars = {};
            // player created and initialized - sends instance of the player
            this.ready = new i0.EventEmitter();
            // state change: send the YT event with its state
            this.change = new i0.EventEmitter();
        }
        YoutubePlayerComponent.prototype.ngAfterContentInit = function () {
            var htmlId = this.playerService.generateUniqueId();
            var playerSize = { height: this.height, width: this.width };
            var container = this.renderer.selectRootElement('#yt-player-ngx-component');
            this.renderer.setAttribute(container, 'id', htmlId);
            this.playerService.loadPlayerApi({
                protocol: this.protocol
            });
            this.playerService.setupPlayer(htmlId, {
                change: this.change,
                ready: this.ready
            }, playerSize, this.videoId, this.playerVars);
        };
        YoutubePlayerComponent.prototype.getProtocol = function () {
            var hasWindow = window && window.location;
            var protocol = hasWindow
                ? window.location.protocol.replace(':', '')
                : 'http';
            return protocol;
        };
        return YoutubePlayerComponent;
    }());
    YoutubePlayerComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'youtube-player',
                    template: "\n    <div id=\"yt-player-ngx-component\"></div>\n  "
                },] }
    ];
    YoutubePlayerComponent.ctorParameters = function () { return [
        { type: YoutubePlayerService },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    YoutubePlayerComponent.propDecorators = {
        videoId: [{ type: i0.Input }],
        height: [{ type: i0.Input }],
        width: [{ type: i0.Input }],
        protocol: [{ type: i0.Input }],
        playerVars: [{ type: i0.Input }],
        ready: [{ type: i0.Output }],
        change: [{ type: i0.Output }]
    };

    var NgxYoutubePlayerModule = /** @class */ (function () {
        function NgxYoutubePlayerModule() {
        }
        NgxYoutubePlayerModule.forRoot = function () {
            return {
                ngModule: NgxYoutubePlayerModule,
                providers: [YoutubePlayerService]
            };
        };
        return NgxYoutubePlayerModule;
    }());
    NgxYoutubePlayerModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [YoutubePlayerComponent],
                    imports: [],
                    providers: [YoutubePlayerService],
                    exports: [YoutubePlayerComponent]
                },] }
    ];

    /*
     * Public API Surface of ngx-youtube-player
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxYoutubePlayerModule = NgxYoutubePlayerModule;
    exports.YouTubePlayerRef = YouTubePlayerRef;
    exports.YouTubeRef = YouTubeRef;
    exports.YoutubePlayerComponent = YoutubePlayerComponent;
    exports.YoutubePlayerService = YoutubePlayerService;
    exports.defaultSizes = defaultSizes;
    exports.win = win;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-youtube-player.umd.js.map
