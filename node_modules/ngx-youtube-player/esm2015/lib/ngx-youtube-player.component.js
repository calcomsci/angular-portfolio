import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { YoutubePlayerService, defaultSizes } from './ngx-youtube-player.service';
export class YoutubePlayerComponent {
    constructor(playerService, elementRef, renderer) {
        this.playerService = playerService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.videoId = '';
        this.height = defaultSizes.height;
        this.width = defaultSizes.width;
        /**
         * @description sets the protocol by the navigator object
         * if there is no window, it sets a default http protocol
         * unless the protocol is set from outside
         */
        this.protocol = this.getProtocol();
        this.playerVars = {};
        // player created and initialized - sends instance of the player
        this.ready = new EventEmitter();
        // state change: send the YT event with its state
        this.change = new EventEmitter();
    }
    ngAfterContentInit() {
        const htmlId = this.playerService.generateUniqueId();
        const playerSize = { height: this.height, width: this.width };
        const container = this.renderer.selectRootElement('#yt-player-ngx-component');
        this.renderer.setAttribute(container, 'id', htmlId);
        this.playerService.loadPlayerApi({
            protocol: this.protocol
        });
        this.playerService.setupPlayer(htmlId, {
            change: this.change,
            ready: this.ready
        }, playerSize, this.videoId, this.playerVars);
    }
    getProtocol() {
        const hasWindow = window && window.location;
        const protocol = hasWindow
            ? window.location.protocol.replace(':', '')
            : 'http';
        return protocol;
    }
}
YoutubePlayerComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'youtube-player',
                template: `
    <div id="yt-player-ngx-component"></div>
  `
            },] }
];
YoutubePlayerComponent.ctorParameters = () => [
    { type: YoutubePlayerService },
    { type: ElementRef },
    { type: Renderer2 }
];
YoutubePlayerComponent.propDecorators = {
    videoId: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    protocol: [{ type: Input }],
    playerVars: [{ type: Input }],
    ready: [{ type: Output }],
    change: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXlvdXR1YmUtcGxheWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC15b3V0dWJlLXBsYXllci9zcmMvbGliL25neC15b3V0dWJlLXBsYXllci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxFQUNOLFNBQVMsRUFFVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLFlBQVksRUFDYixNQUFNLDhCQUE4QixDQUFDO0FBU3RDLE1BQU0sT0FBTyxzQkFBc0I7SUFpQmpDLFlBQ1MsYUFBbUMsRUFDbEMsVUFBc0IsRUFDdEIsUUFBbUI7UUFGcEIsa0JBQWEsR0FBYixhQUFhLENBQXNCO1FBQ2xDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQW5CcEIsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLFdBQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQzdCLFVBQUssR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBQ3BDOzs7O1dBSUc7UUFDTSxhQUFRLEdBQVcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLGVBQVUsR0FBa0IsRUFBRSxDQUFDO1FBRXhDLGdFQUFnRTtRQUN0RCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQWEsQ0FBQztRQUNoRCxpREFBaUQ7UUFDdkMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO0lBTW5ELENBQUM7SUFFSixrQkFBa0I7UUFDaEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3JELE1BQU0sVUFBVSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUMvQywwQkFBMEIsQ0FDM0IsQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUM7WUFDL0IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3hCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUM1QixNQUFNLEVBQ047WUFDRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2xCLEVBQ0QsVUFBVSxFQUNWLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLFVBQVUsQ0FDaEIsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXO1FBQ1QsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDNUMsTUFBTSxRQUFRLEdBQUcsU0FBUztZQUN4QixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDM0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNYLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7OztZQTFERixTQUFTLFNBQUM7Z0JBQ1QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLFFBQVEsRUFBRTs7R0FFVDthQUNGOzs7WUFWQyxvQkFBb0I7WUFUcEIsVUFBVTtZQUtWLFNBQVM7OztzQkFnQlIsS0FBSztxQkFDTCxLQUFLO29CQUNMLEtBQUs7dUJBTUwsS0FBSzt5QkFDTCxLQUFLO29CQUdMLE1BQU07cUJBRU4sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBSZW5kZXJlcjIsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBZb3V0dWJlUGxheWVyU2VydmljZSxcbiAgZGVmYXVsdFNpemVzXG59IGZyb20gJy4vbmd4LXlvdXR1YmUtcGxheWVyLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHNlbGVjdG9yOiAneW91dHViZS1wbGF5ZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgaWQ9XCJ5dC1wbGF5ZXItbmd4LWNvbXBvbmVudFwiPjwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIFlvdXR1YmVQbGF5ZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgQElucHV0KCkgdmlkZW9JZCA9ICcnO1xuICBASW5wdXQoKSBoZWlnaHQgPSBkZWZhdWx0U2l6ZXMuaGVpZ2h0O1xuICBASW5wdXQoKSB3aWR0aCA9IGRlZmF1bHRTaXplcy53aWR0aDtcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBzZXRzIHRoZSBwcm90b2NvbCBieSB0aGUgbmF2aWdhdG9yIG9iamVjdFxuICAgKiBpZiB0aGVyZSBpcyBubyB3aW5kb3csIGl0IHNldHMgYSBkZWZhdWx0IGh0dHAgcHJvdG9jb2xcbiAgICogdW5sZXNzIHRoZSBwcm90b2NvbCBpcyBzZXQgZnJvbSBvdXRzaWRlXG4gICAqL1xuICBASW5wdXQoKSBwcm90b2NvbDogc3RyaW5nID0gdGhpcy5nZXRQcm90b2NvbCgpO1xuICBASW5wdXQoKSBwbGF5ZXJWYXJzOiBZVC5QbGF5ZXJWYXJzID0ge307XG5cbiAgLy8gcGxheWVyIGNyZWF0ZWQgYW5kIGluaXRpYWxpemVkIC0gc2VuZHMgaW5zdGFuY2Ugb2YgdGhlIHBsYXllclxuICBAT3V0cHV0KCkgcmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyPFlULlBsYXllcj4oKTtcbiAgLy8gc3RhdGUgY2hhbmdlOiBzZW5kIHRoZSBZVCBldmVudCB3aXRoIGl0cyBzdGF0ZVxuICBAT3V0cHV0KCkgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxZVC5QbGF5ZXJFdmVudD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGxheWVyU2VydmljZTogWW91dHViZVBsYXllclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGNvbnN0IGh0bWxJZCA9IHRoaXMucGxheWVyU2VydmljZS5nZW5lcmF0ZVVuaXF1ZUlkKCk7XG4gICAgY29uc3QgcGxheWVyU2l6ZSA9IHsgaGVpZ2h0OiB0aGlzLmhlaWdodCwgd2lkdGg6IHRoaXMud2lkdGggfTtcbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLnJlbmRlcmVyLnNlbGVjdFJvb3RFbGVtZW50KFxuICAgICAgJyN5dC1wbGF5ZXItbmd4LWNvbXBvbmVudCdcbiAgICApO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGNvbnRhaW5lciwgJ2lkJywgaHRtbElkKTtcbiAgICB0aGlzLnBsYXllclNlcnZpY2UubG9hZFBsYXllckFwaSh7XG4gICAgICBwcm90b2NvbDogdGhpcy5wcm90b2NvbFxuICAgIH0pO1xuICAgIHRoaXMucGxheWVyU2VydmljZS5zZXR1cFBsYXllcihcbiAgICAgIGh0bWxJZCxcbiAgICAgIHtcbiAgICAgICAgY2hhbmdlOiB0aGlzLmNoYW5nZSxcbiAgICAgICAgcmVhZHk6IHRoaXMucmVhZHlcbiAgICAgIH0sXG4gICAgICBwbGF5ZXJTaXplLFxuICAgICAgdGhpcy52aWRlb0lkLFxuICAgICAgdGhpcy5wbGF5ZXJWYXJzXG4gICAgKTtcbiAgfVxuXG4gIGdldFByb3RvY29sKCkge1xuICAgIGNvbnN0IGhhc1dpbmRvdyA9IHdpbmRvdyAmJiB3aW5kb3cubG9jYXRpb247XG4gICAgY29uc3QgcHJvdG9jb2wgPSBoYXNXaW5kb3dcbiAgICAgID8gd2luZG93LmxvY2F0aW9uLnByb3RvY29sLnJlcGxhY2UoJzonLCAnJylcbiAgICAgIDogJ2h0dHAnO1xuICAgIHJldHVybiBwcm90b2NvbDtcbiAgfVxufVxuIl19