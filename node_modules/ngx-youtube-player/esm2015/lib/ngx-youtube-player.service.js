import { Injectable, NgZone } from "@angular/core";
import { ReplaySubject } from "rxjs";
import * as i0 from "@angular/core";
export function win() {
    return window;
}
export function YouTubeRef() {
    return win()["YT"];
}
export function YouTubePlayerRef() {
    return YouTubeRef().Player;
}
export const defaultSizes = {
    height: 270,
    width: 367,
};
export class YoutubePlayerService {
    constructor(zone) {
        this.zone = zone;
        this.api = new ReplaySubject(1);
        this.createApi();
    }
    loadPlayerApi(options) {
        const doc = win().document;
        if (!YoutubePlayerService["ytApiLoaded"]) {
            YoutubePlayerService.ytApiLoaded = true;
            const playerApiScript = doc.createElement("script");
            playerApiScript.type = "text/javascript";
            playerApiScript.src = `${options.protocol}://www.youtube.com/iframe_api`;
            doc.body.appendChild(playerApiScript);
        }
    }
    setupPlayer(elementId, outputs, sizes, videoId = "", playerVars) {
        const createPlayer = () => {
            if (YouTubePlayerRef) {
                this.createPlayer(elementId, outputs, sizes, videoId, playerVars);
            }
        };
        this.api.subscribe(createPlayer);
    }
    play(player) {
        player.playVideo();
    }
    pause(player) {
        player.pauseVideo();
    }
    playVideo(media, player) {
        const id = media.id.videoId ? media.id.videoId : media.id;
        player.loadVideoById(id);
        this.play(player);
    }
    isPlaying(player) {
        // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING
        const isPlayerReady = player && player.getPlayerState;
        const playerState = isPlayerReady ? player.getPlayerState() : {};
        const isPlayerPlaying = isPlayerReady
            ? playerState !== YouTubeRef().PlayerState.ENDED &&
                playerState !== YouTubeRef().PlayerState.PAUSED
            : false;
        return isPlayerPlaying;
    }
    createPlayer(elementId, outputs, sizes, videoId = "", playerVars = {}) {
        const playerSize = {
            height: sizes.height || defaultSizes.height,
            width: sizes.width || defaultSizes.width,
        };
        const ytPlayer = YouTubePlayerRef();
        return new ytPlayer(elementId, Object.assign(Object.assign({}, playerSize), { events: {
                onReady: (ev) => {
                    this.zone.run(() => outputs.ready && outputs.ready.next(ev.target));
                },
                onStateChange: (ev) => {
                    this.zone.run(() => outputs.change && outputs.change.next(ev));
                },
            }, playerVars,
            videoId }));
    }
    toggleFullScreen(player, isFullScreen) {
        let { height, width } = defaultSizes;
        if (!isFullScreen) {
            height = window.innerHeight;
            width = window.innerWidth;
        }
        player.setSize(width, height);
    }
    // adpoted from uid
    generateUniqueId() {
        const len = 7;
        return Math.random().toString(35).substr(2, len);
    }
    createApi() {
        const onYouTubeIframeAPIReady = () => {
            if (win()) {
                win()["onYouTubeIframeAPIReadyCalled"] = true;
                this.api.next();
            }
        };
        win()["onYouTubeIframeAPIReady"] = onYouTubeIframeAPIReady;
        /**
         * If onYouTubeIframeAPIReady is called in other place, then just trigger next
         * This is to prevent player not initializing issue when another player got initialized in other place
         */
        if (win()["onYouTubeIframeAPIReadyCalled"]) {
            this.api.next();
        }
    }
}
YoutubePlayerService.ytApiLoaded = false;
YoutubePlayerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function YoutubePlayerService_Factory() { return new YoutubePlayerService(i0.ɵɵinject(i0.NgZone)); }, token: YoutubePlayerService, providedIn: "root" });
YoutubePlayerService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root",
            },] }
];
YoutubePlayerService.ctorParameters = () => [
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,